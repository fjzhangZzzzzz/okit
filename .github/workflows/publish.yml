name: Publish Python Package

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      - name: Check branch for manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "Error: Manual trigger is not allowed on main branch"
            exit 1
          fi
          echo "Manual trigger allowed on branch: $BRANCH_NAME"

      - name: Get branch/tag info
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BRANCH_NAME="${GITHUB_REF##*/}"
            echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "is_dev=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF##*/}"
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "is_dev=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate dev version (dev branch manual trigger)
        if: steps.vars.outputs.is_dev == 'true'
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          DATE=$(date +%Y%m%d)
          if [ -f .dev_version_count ]; then
            LAST_DATE=$(cut -d'-' -f1 .dev_version_count)
            LAST_COUNT=$(cut -d'-' -f2 .dev_version_count)
            if [ "$LAST_DATE" = "$DATE" ]; then
              COUNT=$((LAST_COUNT+1))
            else
              COUNT=1
            fi
          else
            COUNT=1
          fi
          echo "$DATE-$COUNT" > .dev_version_count
          VERSION="${BRANCH_NAME}-${DATE}-${COUNT}"
          echo "dev_version=$VERSION" >> $GITHUB_ENV
          echo "Set version: $VERSION"
          sed -i "s/^__version__ = .*/__version__ = \"$VERSION\"/" src/okit/__init__.py

      - name: Sync version with tag (main branch tag release)
        if: steps.vars.outputs.is_dev == 'false'
        run: |
          TAG_NAME="${{ steps.vars.outputs.tag }}"
          CUR_VERSION=$(grep '^__version__' src/okit/__init__.py | cut -d'"' -f2)
          if [ "$CUR_VERSION" != "$TAG_NAME" ]; then
            echo "__version__ is inconsistent, auto update to tag version $TAG_NAME"
            sed -i "s/^__version__ = .*/__version__ = \"$TAG_NAME\"/" src/okit/__init__.py
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add src/okit/__init__.py
            git commit -m "chore: sync version to $TAG_NAME [auto-commit]"
            git push
          else
            echo "__version__ matches tag, no update needed"
          fi

      - name: Build package
        run: uv build .

      - name: Publish to PyPI/TestPyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          TESTPYPI_TOKEN: ${{ secrets.TESTPYPI_TOKEN }}
        run: |
          if [ "${{ steps.vars.outputs.is_dev }}" = "true" ]; then
            echo "Dev branch test release"
            uv publish --index testpypi --token "$TESTPYPI_TOKEN"
          else
            TAG_NAME="${{ steps.vars.outputs.tag }}"
            if [[ "$TAG_NAME" =~ (dev|alpha|beta|rc) ]]; then
              echo "Tag $TAG_NAME test release"
              uv publish --index testpypi --token "$TESTPYPI_TOKEN"
            else
              echo "Tag $TAG_NAME production release"
              uv publish --token "$PYPI_TOKEN"
            fi
          fi
