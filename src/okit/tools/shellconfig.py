import os
import sys
import json
import platform
import click
from pathlib import Path
from typing import Dict, List, Optional, Any
from okit.utils.log import logger, console

from git import Repo, GitCommandError


class ShellConfigManager:
    """Shell configuration manager for multiple shells"""

    SUPPORTED_SHELLS: Dict[str, Dict[str, Any]] = {
        "bash": {
            "rc_file": ".bashrc",
            "profile_file": ".bash_profile",
            "comment_char": "#",
            "source_cmd": "source",
        },
        "zsh": {
            "rc_file": ".zshrc",
            "comment_char": "#",
            "source_cmd": "source",
        },
        "cmd": {
            "rc_file": None,
            "comment_char": "REM",
            "source_cmd": "call",
        },
        "powershell": {
            "rc_file": "$PROFILE",
            "comment_char": "#",
            "source_cmd": ".",
        },
    }

    def __init__(self) -> None:
        self.home_dir = Path.home()
        self.config_dir = self.home_dir / ".okit" / "shellconfig"
        self.config_dir.mkdir(parents=True, exist_ok=True)
        # 统一的 git 仓库路径
        self.git_repo_path = self.config_dir / "shell_configs"
        self.git_repo: Optional[Repo] = None
        # Configuration file for tool settings
        self.tool_config_file = self.config_dir / "config.json"

    def get_tool_config(self) -> Dict[str, Any]:
        """Get tool configuration"""
        if not self.tool_config_file.exists():
            return {}

        try:
            with open(self.tool_config_file, "r", encoding="utf-8") as f:
                return json.load(f)  # type: ignore
        except Exception as e:
            console.print(f"[yellow]Failed to read config file: {e}[/yellow]")
            return {}

    def set_tool_config(self, key: str, value: Any) -> bool:
        """Set tool configuration parameter"""
        try:
            config = self.get_tool_config()
            config[key] = value

            with open(self.tool_config_file, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)

            return True
        except Exception as e:
            console.print(f"[red]Failed to write config: {e}[/red]")
            return False

    def get_tool_config_value(self, key: str) -> Optional[Any]:
        """Get tool configuration parameter value"""
        config = self.get_tool_config()
        return config.get(key)

    def list_tool_config(self) -> None:
        """List all tool configuration parameters"""
        config = self.get_tool_config()

        if not config:
            console.print("[yellow]No configuration parameters set[/yellow]")
            return

        from rich.table import Table

        table = Table(title="Tool Configuration")
        table.add_column("Parameter", style="cyan")
        table.add_column("Value", style="green")

        for key, value in config.items():
            table.add_row(key, str(value))

        console.print(table)

    def get_shell_info(self, shell_name: str) -> Dict[str, Any]:
        """Get shell configuration information"""
        if shell_name not in self.SUPPORTED_SHELLS:
            raise ValueError(f"Unsupported shell: {shell_name}")
        return self.SUPPORTED_SHELLS[shell_name]

    def get_config_file_path(self, shell_name: str) -> Path:
        """Get the path to the custom config file for a shell"""
        shell_info = self.get_shell_info(shell_name)
        return self.home_dir / "customconfig"

    def get_repo_config_path(self, shell_name: str) -> Path:
        """Get the path to the config file in git repository"""
        shell_info = self.get_shell_info(shell_name)
        return self.git_repo_path / shell_name / "customconfig"

    def create_default_config(self, shell_name: str) -> str:
        """Create default configuration content for a shell"""
        shell_info = self.get_shell_info(shell_name)
        comment_char = shell_info["comment_char"]

        if shell_name in ["bash", "zsh"]:
            return f"""{comment_char} Custom configuration for {shell_name}
{comment_char} Generated by okit shellconfig tool

{comment_char} ===== ALIASES =====
alias ll='ls -la'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

{comment_char} ===== PROXY CONFIGURATION =====
{comment_char} Proxy settings - uncomment and modify as needed
{comment_char} export http_proxy=http://127.0.0.1:7897
{comment_char} export https_proxy=http://127.0.0.1:7897
{comment_char} export HTTP_PROXY=http://127.0.0.1:7897
{comment_char} export HTTPS_PROXY=http://127.0.0.1:7897

{comment_char} ===== CUSTOM FUNCTIONS =====
{comment_char} Proxy management functions
proxy() {{
    export http_proxy=http://127.0.0.1:7897
    export https_proxy=http://127.0.0.1:7897
    export HTTP_PROXY=http://127.0.0.1:7897
    export HTTPS_PROXY=http://127.0.0.1:7897
    echo "Proxy enabled: http://127.0.0.1:7897"
}}

noproxy() {{
    unset http_proxy
    unset https_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    echo "Proxy disabled"
}}

showproxy() {{
    if [ -n "$http_proxy" ] || [ -n "$https_proxy" ]; then
        echo "Current proxy settings:"
        echo "HTTP Proxy: $http_proxy"
        echo "HTTPS Proxy: $https_proxy"
    else
        echo "No proxy set"
    fi
}}

{comment_char} ===== ENVIRONMENT VARIABLES =====
{comment_char} Add your environment variables here
"""
        elif shell_name == "cmd":
            return f"""{comment_char} Custom configuration for {shell_name}
{comment_char} Generated by okit shellconfig tool

{comment_char} ===== ALIASES =====
{comment_char} doskey ll=dir /a
{comment_char} doskey la=dir /a
{comment_char} doskey ..=cd ..

{comment_char} ===== PROXY CONFIGURATION =====
{comment_char} Proxy settings - uncomment and modify as needed
{comment_char} set HTTP_PROXY=http://127.0.0.1:7897
{comment_char} set HTTPS_PROXY=http://127.0.0.1:7897

{comment_char} ===== CUSTOM FUNCTIONS =====
{comment_char} Add your custom functions here

{comment_char} ===== ENVIRONMENT VARIABLES =====
{comment_char} Add your environment variables here
"""
        elif shell_name == "powershell":
            return f"""{comment_char} Custom configuration for {shell_name}
{comment_char} Generated by okit shellconfig tool

{comment_char} ===== ALIASES =====
Set-Alias -Name ll -Value Get-ChildItem -Force
Set-Alias -Name la -Value Get-ChildItem -Force -Name ".*"

{comment_char} ===== PROXY CONFIGURATION =====
{comment_char} Proxy settings - uncomment and modify as needed
{comment_char} $env:HTTP_PROXY = "http://127.0.0.1:7897"
{comment_char} $env:HTTPS_PROXY = "http://127.0.0.1:7897"
{comment_char} [System.Net.WebRequest]::DefaultWebProxy = New-Object System.Net.WebProxy("http://127.0.0.1:7897")

{comment_char} ===== CUSTOM FUNCTIONS =====
{comment_char} function proxy {{
{comment_char}     $env:http_proxy = "http://127.0.0.1:7897"
{comment_char}     $env:https_proxy = "http://127.0.0.1:7897"
{comment_char}     [System.Net.WebRequest]::DefaultWebProxy = New-Object System.Net.WebProxy("http://127.0.0.1:7897")
{comment_char}     Write-Host "Proxy Active on: http://127.0.0.1:7897" -ForegroundColor Green
{comment_char} }}

{comment_char} function noproxy {{
{comment_char}     $env:http_proxy = $null
{comment_char}     $env:https_proxy = $null
{comment_char}     [System.Net.WebRequest]::DefaultWebProxy = $null
{comment_char}     Write-Host "Proxy Negatived." -ForegroundColor Red
{comment_char} }}

{comment_char} function showproxy {{
{comment_char}     if ($env:http_proxy -or $env:https_proxy) {{
{comment_char}         Write-Host "Current proxy settings:" -ForegroundColor Green
{comment_char}         Write-Host "HTTP Proxy: $env:http_proxy"
{comment_char}         Write-Host "HTTPS Proxy: $env:https_proxy"
{comment_char}     }} else {{
{comment_char}         Write-Host "No proxy set." -ForegroundColor Red
{comment_char}     }}
{comment_char} }}

{comment_char} ===== ENVIRONMENT VARIABLES =====
{comment_char} Add your environment variables here
"""
        else:
            return f"{comment_char} Custom configuration for {shell_name}\n"

    def show_source_commands(self, shell_name: str) -> None:
        """Show commands to source the configuration"""
        shell_info = self.get_shell_info(shell_name)
        config_file = self.get_config_file_path(shell_name)
        source_cmd = shell_info["source_cmd"]

        console.print(f"\n[bold]To apply the configuration:[/bold]")

        if shell_name in ["bash", "zsh"]:
            console.print(f"[cyan]{source_cmd} {config_file}[/cyan]")
            console.print(f"[cyan]Or add to your {shell_info['rc_file']}:[/cyan]")
            console.print(
                f"[cyan]echo '{source_cmd} {config_file}' >> ~/{shell_info['rc_file']}[/cyan]"
            )

        elif shell_name == "cmd":
            console.print(f"[cyan]{source_cmd} {config_file}[/cyan]")
            console.print(f"[cyan]Or run: {config_file}[/cyan]")

        elif shell_name == "powershell":
            console.print(f"[cyan]{source_cmd} {config_file}[/cyan]")
            console.print(f"[cyan]Or add to your profile:[/cyan]")
            console.print(
                f"[cyan]Add '{source_cmd} {config_file}' to your PowerShell profile[/cyan]"
            )

    def setup_git_repo(self, repo_url: Optional[str] = None) -> bool:
        """Setup unified git repository for all shell configurations"""
        try:
            if self.git_repo_path.exists():
                console.print(
                    f"[yellow]Git repository already exists: {self.git_repo_path}[/yellow]"
                )
                return True

            # Create repository
            self.git_repo_path.mkdir(parents=True, exist_ok=True)

            # Initialize git repository
            self.git_repo = Repo.init(self.git_repo_path)

            # Create shell directories and copy existing configs
            for shell_name in self.SUPPORTED_SHELLS:
                shell_dir = self.git_repo_path / shell_name
                shell_dir.mkdir(exist_ok=True)

                config_file = self.get_config_file_path(shell_name)
                repo_config = self.get_repo_config_path(shell_name)

                if config_file.exists():
                    import shutil

                    shutil.copy2(config_file, repo_config)
                else:
                    # Create default config in repo
                    default_config = self.create_default_config(shell_name)
                    with open(repo_config, "w", encoding="utf-8") as f:
                        f.write(default_config)

            # Add and commit all files
            self.git_repo.index.add("*")
            self.git_repo.index.commit("Initial shell configurations")

            # Add remote if provided
            if repo_url:
                origin = self.git_repo.create_remote("origin", repo_url)
                console.print(f"[green]Added remote origin: {repo_url}[/green]")
                # Save repo_url to configuration
                self.set_tool_config("repo_url", repo_url)

            console.print(
                f"[green]Git repository initialized: {self.git_repo_path}[/green]"
            )
            return True

        except Exception as e:
            console.print(f"[red]Failed to setup git repository: {e}[/red]")
            return False

    def update_repo(self) -> bool:
        """Update git repository from remote"""
        if not self.git_repo_path.exists():
            return False

        try:
            if self.git_repo is None:
                self.git_repo = Repo(self.git_repo_path)

            # Check if remote exists
            if "origin" not in [remote.name for remote in self.git_repo.remotes]:
                # Try to add remote from config
                repo_url = self.get_tool_config_value("repo_url")
                if repo_url:
                    console.print(
                        f"[yellow]Adding remote from config: {repo_url}[/yellow]"
                    )
                    self.git_repo.create_remote("origin", repo_url)
                else:
                    console.print("[yellow]No remote repository configured[/yellow]")
                    return False

            # Fetch latest changes
            self.git_repo.remotes.origin.fetch()

            # Pull latest changes
            self.git_repo.remotes.origin.pull()

            console.print("[green]Repository updated successfully[/green]")
            return True

        except GitCommandError as e:
            console.print(f"[red]Failed to update repository: {e}[/red]")
            return False
        except Exception as e:
            console.print(f"[red]Failed to update repository: {e}[/red]")
            return False

    def sync_config(self, shell_name: str) -> bool:
        """Sync configuration from git repository"""
        try:
            config_file = self.get_config_file_path(shell_name)
            repo_config = self.get_repo_config_path(shell_name)

            # First update the repository
            if not self.update_repo():
                console.print(
                    "[yellow]Repository update failed, skipping sync[/yellow]"
                )
                return False

            # Check if repo config exists
            if not repo_config.exists():
                console.print(
                    f"[yellow]No configuration found in repository for {shell_name}[/yellow]"
                )
                return False

            # Read current and repo configs
            current_content = ""
            if config_file.exists():
                with open(config_file, "r", encoding="utf-8") as f:
                    current_content = f.read()

            with open(repo_config, "r", encoding="utf-8") as f:
                repo_content = f.read()

            # Compare contents
            if current_content == repo_content:
                console.print(
                    f"[yellow]Configuration for {shell_name} is already up to date[/yellow]"
                )
                return True

            # Update local config
            import shutil

            shutil.copy2(repo_config, config_file)
            console.print(
                f"[green]Configuration for {shell_name} updated from repository[/green]"
            )
            return True

        except Exception as e:
            console.print(f"[red]Failed to sync configuration: {e}[/red]")
            return False

    def list_configs(self) -> None:
        """List all shell configurations (table view)"""
        try:
            from rich.table import Table
        except ImportError:
            # rich 不可用时，回退为原有输出
            console.print("[bold]Shell Configurations:[/bold]")
            for shell_name in self.SUPPORTED_SHELLS:
                config_file = self.get_config_file_path(shell_name)
                repo_config = self.get_repo_config_path(shell_name)
                status = []
                if config_file.exists():
                    status.append("[green]✓ Local Config[/green]")
                else:
                    status.append("[red]✗ No Local Config[/red]")
                if repo_config.exists():
                    status.append("[green]✓ Repo Config[/green]")
                else:
                    status.append("[red]✗ No Repo Config[/red]")
                if self.git_repo_path.exists():
                    status.append("[green]✓ Git Repo[/green]")
                else:
                    status.append("[red]✗ No Git Repo[/red]")
                console.print(f"  {shell_name}: {' '.join(status)}")
                if config_file.exists():
                    console.print(f"    Local: {config_file}")
                if repo_config.exists():
                    console.print(f"    Repo: {repo_config}")
            return

        table = Table(title="Shell Configurations", show_lines=True)
        table.add_column("Shell", style="bold cyan", justify="center")
        table.add_column("Local Config", style="green", justify="center")
        table.add_column("Repo Config", style="magenta", justify="center")
        table.add_column("Git Repo", style="yellow", justify="center")

        for shell_name in self.SUPPORTED_SHELLS:
            config_file = self.get_config_file_path(shell_name)
            repo_config = self.get_repo_config_path(shell_name)
            local_status = (
                f"[green]✓[/green]\n{config_file}"
                if config_file.exists()
                else "[red]✗[/red]"
            )
            repo_status = (
                f"[green]✓[/green]\n{repo_config}"
                if repo_config.exists()
                else "[red]✗[/red]"
            )
            git_status = (
                f"[green]✓[/green]\n{self.git_repo_path}"
                if self.git_repo_path.exists()
                else "[red]✗[/red]"
            )
            table.add_row(shell_name, local_status, repo_status, git_status)
        console.print(table)

    def initialize_config_if_needed(self, shell_name: str) -> bool:
        """Initialize custom configuration file if it doesn't exist"""
        config_file = self.get_config_file_path(shell_name)

        if config_file.exists():
            return True

        console.print(f"[yellow]Configuration file not found: {config_file}[/yellow]")
        console.print(f"Auto-initializing configuration for {shell_name}...")

        # Try to get config from git repository first
        repo_config_path = self.get_repo_config_path(shell_name)
        if repo_config_path.exists():
            console.print(
                f"[green]Found configuration in git repository: {repo_config_path}[/green]"
            )
            # Copy from git repository
            import shutil

            shutil.copy2(repo_config_path, config_file)
            console.print(f"[green]Copied configuration from git repository[/green]")
        else:
            console.print(
                f"[yellow]No configuration found in git repository, creating default[/yellow]"
            )
            # Create default configuration
            default_config = self.create_default_config(shell_name)
            with open(config_file, "w", encoding="utf-8") as f:
                f.write(default_config)
            console.print(
                f"[green]Created default configuration for {shell_name}[/green]"
            )

        return True

    def enable_config(self, shell_name: str) -> bool:
        """Enable customconfig by adding source command to rc file"""
        try:
            shell_info = self.get_shell_info(shell_name)
            rc_file_name = shell_info["rc_file"]

            if not rc_file_name:
                console.print(
                    f"[yellow]No rc file configured for {shell_name}[/yellow]"
                )
                return False

            rc_file = self.home_dir / rc_file_name
            config_file = self.get_config_file_path(shell_name)
            source_cmd = shell_info["source_cmd"]

            # Initialize config file if needed
            if not self.initialize_config_if_needed(shell_name):
                return False

            # Create rc file if it doesn't exist
            if not rc_file.exists():
                rc_file.touch()
                console.print(f"[green]Created rc file: {rc_file}[/green]")

            # Read current rc file content
            with open(rc_file, "r", encoding="utf-8") as f:
                content = f.read()

            # Check if source command already exists
            source_line = f"{source_cmd} {config_file}"
            if source_line in content:
                console.print(
                    f"[yellow]Configuration already enabled for {shell_name}[/yellow]"
                )
                return True

            # Add source command to rc file
            with open(rc_file, "a", encoding="utf-8") as f:
                f.write(
                    f"\n# Custom configuration source - added by okit shellconfig\n{source_line}\n"
                )

            console.print(f"[green]Configuration enabled for {shell_name}[/green]")
            console.print(f"Added '{source_line}' to {rc_file}")
            console.print(
                f"Restart your shell or run '{source_cmd} {rc_file}' to apply changes"
            )

            return True

        except Exception as e:
            console.print(
                f"[red]Failed to enable configuration for {shell_name}: {e}[/red]"
            )
            return False

    def disable_config(self, shell_name: str) -> bool:
        """Disable customconfig by removing source command from rc file"""
        try:
            shell_info = self.get_shell_info(shell_name)
            rc_file_name = shell_info["rc_file"]

            if not rc_file_name:
                console.print(
                    f"[yellow]No rc file configured for {shell_name}[/yellow]"
                )
                return False

            rc_file = self.home_dir / rc_file_name
            config_file = self.get_config_file_path(shell_name)
            source_cmd = shell_info["source_cmd"]

            # Check if rc file exists
            if not rc_file.exists():
                console.print(f"[yellow]Rc file not found: {rc_file}[/yellow]")
                return True  # Consider as already disabled

            # Read current rc file content
            with open(rc_file, "r", encoding="utf-8") as f:
                lines = f.readlines()

            # Find and remove source command lines
            source_line = f"{source_cmd} {config_file}"
            comment_line = "# Custom configuration source - added by okit shellconfig"

            new_lines = []
            removed = False

            for i, line in enumerate(lines):
                # Skip the comment line and source line
                if (
                    line.strip() == comment_line
                    or line.strip() == source_line
                    or line.strip() == f"{source_line}\n"
                ):
                    removed = True
                    continue
                new_lines.append(line)

            if not removed:
                console.print(
                    f"[yellow]Configuration not found in rc file for {shell_name}[/yellow]"
                )
                return True

            # Write back the cleaned content
            with open(rc_file, "w", encoding="utf-8") as f:
                f.writelines(new_lines)

            console.print(f"[green]Configuration disabled for {shell_name}[/green]")
            console.print(f"Removed source command from {rc_file}")
            console.print(f"Restart your shell to apply changes")

            return True

        except Exception as e:
            console.print(
                f"[red]Failed to disable configuration for {shell_name}: {e}[/red]"
            )
            return False

    def check_config_status(self, shell_name: str) -> bool:
        """Check if customconfig is enabled in rc file"""
        try:
            shell_info = self.get_shell_info(shell_name)
            rc_file_name = shell_info["rc_file"]

            if not rc_file_name:
                return False

            rc_file = self.home_dir / rc_file_name
            config_file = self.get_config_file_path(shell_name)
            source_cmd = shell_info["source_cmd"]

            if not rc_file.exists():
                return False

            # Read rc file content
            with open(rc_file, "r", encoding="utf-8") as f:
                content = f.read()

            # Check if source command exists
            source_line = f"{source_cmd} {config_file}"
            return source_line in content

        except Exception:
            return False


@click.group()
def cli() -> None:
    """Shell configuration management tool"""
    pass


@cli.command()
@click.argument("action", type=click.Choice(["get", "set", "list", "setup"]))
@click.argument("key", required=False)
@click.argument("value", required=False)
@click.option(
    "--repo-url", help="Git repository URL for configuration (used with setup action)"
)
def config(
    action: str, key: Optional[str], value: Optional[str], repo_url: Optional[str]
) -> None:
    """Manage tool configuration (similar to git config)"""
    manager = ShellConfigManager()

    if action == "get":
        if not key:
            console.print("[red]Error: key is required for 'get' action[/red]")
            return
        result = manager.get_tool_config_value(key)
        if result is not None:
            console.print(result)
        else:
            console.print(f"[yellow]No value found for key: {key}[/yellow]")

    elif action == "set":
        if not key or value is None:
            console.print(
                "[red]Error: both key and value are required for 'set' action[/red]"
            )
            return
        if manager.set_tool_config(key, value):
            console.print(f"[green]Set {key} = {value}[/green]")
        else:
            console.print(f"[red]Failed to set {key}[/red]")

    elif action == "list":
        manager.list_tool_config()

    elif action == "setup":
        # Setup git repository (replaces old setup_git command)
        if repo_url:
            manager.setup_git_repo(repo_url)
        else:
            # Try to get repo_url from config
            config_repo_url = manager.get_tool_config_value("repo_url")
            if config_repo_url:
                manager.setup_git_repo(config_repo_url)
            else:
                console.print(
                    "[yellow]No repo_url provided or configured. Use --repo-url option.[/yellow]"
                )
                console.print(
                    "Example: config setup --repo-url https://github.com/user/repo.git"
                )


@cli.command()
@click.argument("shell", type=click.Choice(["bash", "zsh", "cmd", "powershell"]))
def sync(shell: str) -> None:
    """Sync configuration from git repository"""
    manager = ShellConfigManager()
    manager.sync_config(shell)


@cli.command()
@click.argument("shell", type=click.Choice(["bash", "zsh", "cmd", "powershell"]))
def source(shell: str) -> None:
    """Show commands to source the configuration"""
    manager = ShellConfigManager()
    manager.show_source_commands(shell)


@cli.command()
@click.argument("shell", type=click.Choice(["bash", "zsh", "cmd", "powershell"]))
def enable(shell: str) -> None:
    """Enable customconfig by adding source command to rc file"""
    manager = ShellConfigManager()
    manager.enable_config(shell)


@cli.command()
@click.argument("shell", type=click.Choice(["bash", "zsh", "cmd", "powershell"]))
def disable(shell: str) -> None:
    """Disable customconfig by removing source command from rc file"""
    manager = ShellConfigManager()
    manager.disable_config(shell)


@cli.command()
@click.argument("shell", type=click.Choice(["bash", "zsh", "cmd", "powershell"]))
def status(shell: str) -> None:
    """Check if customconfig is enabled in rc file"""
    manager = ShellConfigManager()
    is_enabled = manager.check_config_status(shell)

    if is_enabled:
        console.print(f"[green]✓ Configuration is enabled for {shell}[/green]")
    else:
        console.print(f"[red]✗ Configuration is disabled for {shell}[/red]")

    # Show additional info
    config_file = manager.get_config_file_path(shell)
    shell_info = manager.get_shell_info(shell)
    rc_file = (
        manager.home_dir / shell_info["rc_file"] if shell_info["rc_file"] else None
    )

    console.print(
        f"Config file: {config_file} ({'exists' if config_file.exists() else 'missing'})"
    )
    if rc_file:
        console.print(
            f"RC file: {rc_file} ({'exists' if rc_file.exists() else 'missing'})"
        )


if __name__ == "__main__":
    cli()
